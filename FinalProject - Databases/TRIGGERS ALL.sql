------ TRIGGER 1 INSERT

CREATE or ALTER TRIGGER trigger_1
ON PROMOTIONS
INSTEAD OF INSERT
AS
BEGIN
	
	INSERT INTO PROMOTIONS (IDSTORE, STARTDATE, ENDDATE, TYPEOFPROMOTION, STARTINGPRICE, FINALPRICE, PRICEREDUCTIONPERDAY)
	SELECT i.IDSTORE, i.STARTDATE, i.ENDDATE, i.TYPEOFPROMOTION, i.STARTINGPRICE, i.FINALPRICE, i.PRICEREDUCTIONPERDAY
	FROM inserted i
	WHERE (NOT EXISTS (SELECT p.idpromotion FROM promotions p WHERE 
		((i.ENDDATE >= p.STARTDATE) and (i.STARTDATE <= p.ENDDATE)) and i.IDSTORE = p.IDSTORE)) 

END
GO


CREATE or ALTER TRIGGER trigger_1_aft
ON PROMOTIONS
AFTER INSERT
AS
BEGIN
	
	DELETE  PROMOTIONS 
	FROM inserted i, inserted i2
	WHERE ((i.ENDDATE >= i2.STARTDATE) and (i.STARTDATE <= i2.ENDDATE) and i.IDSTORE = i2.IDSTORE and
		i.IDPROMOTION = PROMOTIONS.IDPROMOTION and i.IDPROMOTION != i2.IDPROMOTION) 

END
GO

------ TRIGGER 1 UPDATE

CREATE or ALTER TRIGGER trigger_1_upd
ON PROMOTIONS
INSTEAD OF UPDATE
AS
BEGIN
	if TRIGGER_NESTLEVEL() > 1
		RETURN
	UPDATE PROMOTIONS
	SET IDSTORE = i.IDSTORE, STARTDATE = i.STARTDATE, ENDDATE = i.ENDDATE, TYPEOFPROMOTION = i.TYPEOFPROMOTION, 
		STARTINGPRICE = i.STARTINGPRICE, FINALPRICE = i.FINALPRICE, PRICEREDUCTIONPERDAY = i.PRICEREDUCTIONPERDAY
	FROM  inserted i, deleted d 
	WHERE (NOT EXISTS (SELECT p.idpromotion FROM promotions p WHERE 
		((i.ENDDATE >= p.STARTDATE) and (i.STARTDATE <= p.ENDDATE)) and i.IDSTORE = p.IDSTORE)) and i.IDPROMOTION = PROMOTIONS.IDPROMOTION

END
GO


create or alter trigger trigger_1_aft_upd

ON PROMOTIONS
after update
as 
begin

	UPDATE promotions
	SET IDSTORE = d.IDSTORE, STARTDATE = d.STARTDATE, ENDDATE = d.ENDDATE, TYPEOFPROMOTION = d.TYPEOFPROMOTION, 
	STARTINGPRICE = d.STARTINGPRICE, FINALPRICE = d.FINALPRICE, PRICEREDUCTIONPERDAY = d.PRICEREDUCTIONPERDAY
	FROM inserted i, inserted i1, deleted d
	WHERE ((i.ENDDATE >= i1.STARTDATE) and (i.STARTDATE <= i1.ENDDATE) and i.IDSTORE = i1.IDSTORE and
	i.IDPROMOTION = PROMOTIONS.IDPROMOTION and i.IDPROMOTION != i1.IDPROMOTION and i.IDPROMOTION = d.IDPROMOTION) 

end
go


------ TRIGGER 2

CREATE or ALTER TRIGGER trigger_2
ON ITEMS
AFTER UPDATE
AS
BEGIN
	
	UPDATE ITEMS
	SET PRICEOFSALE = (p.STARTINGPRICE - (DATEDIFF(DAY, p.STARTDATE, i.DATE_OF_SALE) * p.PRICEREDUCTIONPERDAY))
	FROM promotions p, inserted i, promoitems pr_it, deleted d
	WHERE  p.TYPEOFPROMOTION = 'Countdown' and 
		(i.DATE_OF_SALE >= p.STARTDATE and i.DATE_OF_SALE <= p.ENDDATE) and p.IDPROMOTION = pr_it.IDPROMOTION and 
		ITEMS.IDITEM = pr_it.IDITEM and d.DATE_OF_SALE is NULL and i.DATE_OF_SALE is NOT NULL and 
		ITEMS.IDITEM = i.IDITEM

	UPDATE ITEMS
	SET PRICEOFSALE = ITEMS.PRICE * (1.0 - (pr_it.DISCOUNTPERCENTAGE / 100.0)) 
	FROM promotions p, inserted i, promoitems pr_it, deleted d
	WHERE  p.TYPEOFPROMOTION = 'Regular' and 
	(i.DATE_OF_SALE >= p.STARTDATE and i.DATE_OF_SALE <= p.ENDDATE) and p.IDPROMOTION = pr_it.IDPROMOTION and 
	ITEMS.IDITEM = pr_it.IDITEM  and d.DATE_OF_SALE is NULL and i.DATE_OF_SALE is not null and 
	ITEMS.IDITEM = i.IDITEM

	UPDATE ITEMS
	SET PRICEOFSALE = ITEMS.PRICE
	FROM inserted i, deleted d, promoitems pr_it, promotions p
	WHERE (NOT EXISTS (SELECT pr_it.IDITEM FROM promoitems pr_it WHERE i.IDITEM = pr_it.IDITEM) or
	(NOT EXISTS (select p.IDPROMOTION from inserted i, promotions p where (i.DATE_OF_SALE >= p.STARTDATE and i.DATE_OF_SALE <= p.ENDDATE) ))) and d.DATE_OF_SALE is NULL and i.DATE_OF_SALE is not null and 
	ITEMS.IDITEM = i.IDITEM
	 
END
GO


------ TRIGGER 3 INSERT

CREATE or ALTER TRIGGER trigger_3
ON ITEMS
AFTER INSERT
AS
BEGIN 

	DELETE ITEMS
	FROM inserted i, stores s
	WHERE (s.STORETYPE = 'Regular' and ITEMS.PREMIUM = 1 and ITEMS.IDITEM = i.IDITEM and ITEMS.IDDESTINATIONSTORE = s.IDSTORE) or 
	(s.STORETYPE = 'Premium' and ITEMS.PREMIUM = 0 and ITEMS.IDITEM = i.IDITEM and ITEMS.IDDESTINATIONSTORE = s.IDSTORE)

END
GO

------ TRIGGER 3 UPDATE

CREATE or ALTER TRIGGER trigger_3_upd
ON ITEMS
AFTER UPDATE
AS
BEGIN
	if TRIGGER_NESTLEVEL() > 1
		RETURN
	UPDATE ITEMS
	SET IDSIZE = d.IDSIZE, IDORIGIN = d.IDORIGIN, IDSOCIALPROJECT = d.IDSOCIALPROJECT, IDCATEGORY = d.IDCATEGORY, IDSUBCATEGORY = d.IDSUBCATEGORY, 
	IDDESTINATIONSTORE = d.IDDESTINATIONSTORE, DATE_OF_ENTRANCE_IN_NDC = d.DATE_OF_ENTRANCE_IN_NDC, DATE_OF_EXIT_FROM_THE_NDC = d.DATE_OF_EXIT_FROM_THE_NDC,
	DATE_OF_SALE = d.DATE_OF_SALE, "USE" = d."USE", PRICE = d.PRICE, PRICEOFSALE = d.PRICEOFSALE, PREMIUM = d.PREMIUM, BRAND = d.BRAND, SEASON = d.SEASON
	from deleted d, stores s
	where  (s.STORETYPE = 'Regular' and ITEMS.PREMIUM = 1 and ITEMS.IDITEM = d.IDITEM and ITEMS.IDDESTINATIONSTORE = s.IDSTORE) or 
	(s.STORETYPE = 'Premium' and ITEMS.PREMIUM = 0 and ITEMS.IDITEM = d.IDITEM and ITEMS.IDDESTINATIONSTORE = s.IDSTORE)

END
GO

------ TRIGGER 4 INSERT

CREATE or ALTER TRIGGER trigger_4
ON ITEMS
AFTER INSERT
AS
BEGIN

	DELETE ITEMS
	FROM inserted i, SOCIAL_PROJECTS sp, Stores s, ArticleCategories c, ArticleSubCategories sc
	WHERE  (ITEMS.IDSOCIALPROJECT is NULL and ITEMS."USE" = 'Reuse'and ITEMS.IDITEM = i.IDITEM) or
		((ITEMS.PREMIUM is NULL or ITEMS.PRICE is NULL or ITEMS.IDDESTINATIONSTORE is NULL or
		ITEMS.IDCATEGORY is NULL or ITEMS.IDSUBCATEGORY is NULL) and ITEMS."USE" = 'Resell'and ITEMS.IDITEM = i.IDITEM) 

END
GO


------ TRIGGER 4 UPDATE

CREATE or ALTER TRIGGER trigger_4_upd
ON ITEMS
AFTER UPDATE
AS
BEGIN
	if TRIGGER_NESTLEVEL() > 1
		RETURN
	UPDATE ITEMS
	SET IDSIZE = d.IDSIZE, IDORIGIN = d.IDORIGIN, IDSOCIALPROJECT = d.IDSOCIALPROJECT, IDCATEGORY = d.IDCATEGORY, IDSUBCATEGORY = d.IDSUBCATEGORY, 
	IDDESTINATIONSTORE = d.IDDESTINATIONSTORE, DATE_OF_ENTRANCE_IN_NDC = d.DATE_OF_ENTRANCE_IN_NDC, DATE_OF_EXIT_FROM_THE_NDC = d.DATE_OF_EXIT_FROM_THE_NDC,
	DATE_OF_SALE = d.DATE_OF_SALE, "USE" = d."USE", PRICE = d.PRICE, PRICEOFSALE = d.PRICEOFSALE, PREMIUM = d.PREMIUM, BRAND = d.BRAND, SEASON = d.SEASON
	from deleted d
	where  (ITEMS.IDSOCIALPROJECT is NULL and ITEMS."USE" = 'Reuse'and ITEMS.IDITEM = d.IDITEM) or
		((ITEMS.PREMIUM is NULL or ITEMS.PRICE is NULL or ITEMS.IDDESTINATIONSTORE is NULL or
		ITEMS.IDCATEGORY is NULL or ITEMS.IDSUBCATEGORY is NULL) and ITEMS."USE" = 'Resell'and ITEMS.IDITEM = d.IDITEM) 

END
GO

------ TRIGGER 5 INSERT

CREATE or ALTER TRIGGER trigger_5
ON ITEMS
AFTER INSERT 
AS
BEGIN

	DELETE ITEMS
	FROM stores s1, stores s2, warehouses w, containers c, inserted i
	WHERE  ((ITEMS."USE" = 'Resell' and ITEMS.IDITEM = i.IDITEM) and 
			((ITEMS.IDORIGIN = c.IDCONTAINER and w.IDWAREHOUSE = c.IDWAREHOUSE and w.IDNDC != s2.IDNDC and ITEMS.IDDESTINATIONSTORE = s2.IDSTORE) or
			(ITEMS.IDORIGIN = s1.IDSTORE and ITEMS.IDDESTINATIONSTORE = s2.IDSTORE and s1.IDNDC != s2.IDNDC)))

END
GO

------ TRIGGER 5 UPDATE

CREATE or ALTER TRIGGER trigger_5_upd
ON ITEMS
AFTER UPDATE
AS
BEGIN
	if TRIGGER_NESTLEVEL() > 1
		RETURN
	UPDATE ITEMS
	SET IDSIZE = d.IDSIZE, IDORIGIN = d.IDORIGIN, IDSOCIALPROJECT = d.IDSOCIALPROJECT, IDCATEGORY = d.IDCATEGORY, IDSUBCATEGORY = d.IDSUBCATEGORY, 
	IDDESTINATIONSTORE = d.IDDESTINATIONSTORE, DATE_OF_ENTRANCE_IN_NDC = d.DATE_OF_ENTRANCE_IN_NDC, DATE_OF_EXIT_FROM_THE_NDC = d.DATE_OF_EXIT_FROM_THE_NDC,
	DATE_OF_SALE = d.DATE_OF_SALE, "USE" = d."USE", PRICE = d.PRICE, PRICEOFSALE = d.PRICEOFSALE, PREMIUM = d.PREMIUM, BRAND = d.BRAND, SEASON = d.SEASON
	FROM STORES s1, stores s2, warehouses w, containers c, deleted d
	WHERE  ((ITEMS."USE" = 'Resell' and ITEMS.IDITEM = d.IDITEM) and 
			((ITEMS.IDORIGIN = c.IDCONTAINER and w.IDWAREHOUSE = c.IDWAREHOUSE and w.IDNDC != s2.IDNDC and ITEMS.IDDESTINATIONSTORE = s2.IDSTORE) or
			(ITEMS.IDORIGIN = s1.IDSTORE and ITEMS.IDDESTINATIONSTORE = s2.IDSTORE and s1.IDNDC != s2.IDNDC)))

END
GO